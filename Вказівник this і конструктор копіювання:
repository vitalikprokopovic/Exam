#include <iostream>
#include <stdexcept>

using namespace std;

class Matrix {
private:
    int rows;
    int cols;
    double** data;

public:
 
    Matrix(int rows, int cols) : rows(rows), cols(cols) {
        data = new double*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new double[cols];
            for (int j = 0; j < cols; ++j) {
                data[i][j] = 0.0; 
            }
        }
    }

  
    Matrix(const Matrix& other) : rows(other.rows), cols(other.cols) {
        data = new double*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new double[cols];
            for (int j = 0; j < cols; ++j) {
                data[i][j] = other.data[i][j];
            }
        }
    }

   
    ~Matrix() {
        for (int i = 0; i < rows; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }


    double& at(int row, int col) {
        if (row >= 0 && row < rows && col >= 0 && col < cols) {
            return data[row][col];
        } else {
            throw out_of_range("Index out of range");
        }
    }


    int getRows() const {
        return rows;
    }

    
    int getCols() const {
        return cols;
    }

   
    void print() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }

    
    Matrix& operator=(const Matrix& other) {
        if (this != &other) {
            for (int i = 0; i < rows; ++i) {
                delete[] data[i];
            }
            delete[] data;

            rows = other.rows;
            cols = other.cols;
            data = new double*[rows];
            for (int i = 0; i < rows; ++i) {
                data[i] = new double[cols];
                for (int j = 0; j < cols; ++j) {
                    data[i][j] = other.data[i][j];
                }
            }
        }
        return *this;
    }
};

int main() {
    Matrix mat1(3, 3);
    mat1.at(0, 0) = 1.0;
    mat1.at(1, 1) = 2.0;
    mat1.at(2, 2) = 3.0;

    cout << "Matrix 1:" << endl;
    mat1.print();

   
    Matrix mat2 = mat1;
    cout << "Matrix 2 (copied from Matrix 1):" << endl;
    mat2.print();


    mat1.at(0, 0) = 9.0;
    cout << "Modified Matrix 1:" << endl;
    mat1.print();

    cout << "Matrix 2 after modifying Matrix 1:" << endl;
    mat2.print();

    return 0;
}
