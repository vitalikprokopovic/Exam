#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    ~LinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void addNode(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void deleteNode(int value) {
        if (!head) {
            return;
        }

        Node* temp = head;
        Node* prev = nullptr;

       
        while (temp && temp->data != value) {
            prev = temp;
            temp = temp->next;
        }

       
        if (temp && temp->data == value) {
            if (temp == head) {
                head = temp->next;
            } else {
                prev->next = temp->next;
            }
            delete temp;
        }
    }

    bool searchNode(int value) {
        Node* temp = head;
        while (temp) {
            if (temp->data == value) {
                return true;
            }
            temp = temp->next;
        }
        return false;
    }

    void displayList() {
        Node* temp = head;
        while (temp) {
            std::cout << temp->data << " -> ";
            temp = temp->next;
        }
        std::cout << "nullptr" << std::endl;
    }
};

int main() {
    using namespace std; 
    LinkedList list;

   
    list.addNode(5);
    list.addNode(10);
    list.addNode(15);
    list.addNode(20);

    
    cout << "Initial list:" << endl;
    list.displayList();


    list.deleteNode(10);
    cout << "List after deleting 10:" << endl;
    list.displayList();

   
    int searchValue = 15;
    cout << "Search for value " << searchValue << ": "
         << (list.searchNode(searchValue) ? "Found" : "Not found")
         << endl;

  
    searchValue = 25;
    cout << "Search for value " << searchValue << ": "
         << (list.searchNode(searchValue) ? "Found" : "Not found")
         << endl;

    return 0;
}
